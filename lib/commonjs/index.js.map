{"version":3,"sources":["index.tsx"],"names":["Espressif","NativeModules","WifiAuth","ESPTransportType","ESPSecurityType","ESPDeviceState","ESPNetworkStatus","ESPEventState","ESPBluetoothState","setCallback","device","startSession","uuid","connect","connectTo","setCredentials","ssid","passphrase","scanWifi","wifisJSON","JSON","parse","networkTest","networkTestStatus","disconnect","getDeviceInfo","infoJson","Wrapper","peripherals","RNEspressifEvent","NativeEventEmitter","removeAllListeners","addListener","status","bluetoothStatus","addBluetoothStatusListener","callback","addDevicesListListener","json","data","forEach","peripheral","emit","state","dataStr","console","info","index","findIndex","Object","assign","onStatusChanged","components","onNetworkStatusChanged"],"mappings":"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","sourcesContent":["import {\n  EmitterSubscription,\n  EventSubscriptionVendor,\n  NativeEventEmitter,\n  NativeModules,\n} from 'react-native';\n\nconst { Espressif } = NativeModules as {\n  Espressif: EspressifType & EventSubscriptionVendor;\n};\n\nexport type EspressifConfig = {\n  transportType: ESPTransportType;\n  securityType: ESPSecurityType;\n  wifiBaseUrl?: string;\n  wifiNetworkNamePrefix?: string;\n  bleDeviceNamePrefix?: string;\n  bleSessionUuid?: string;\n  bleConfigUuid?: string;\n  bleServiceUuid?: string;\n};\n\nexport type EspressifDeviceInfo = {\n  UUID: string;\n  MACWiFi: string;\n  MACEthernet: string;\n  FWVersion: string;\n  DeviceCompatibility: string;\n};\n\nexport enum WifiAuth {\n  WPA2 = 'WPA2_PSK',\n  WPA_WPA2 = 'WPA_WPA2_PSK',\n  WPA_ENTERPRISE = 'WPA_ENTERPRISE',\n  OPEN = 'OPEN',\n}\n\nexport type EspressifWifi = {\n  rssi: number;\n  channel: number;\n  ssid: string;\n  auth: WifiAuth;\n};\n\nexport type EspressifDevice = {\n  name: string;\n  uuid: string;\n  networkStatus: ESPNetworkStatus;\n  state: ESPDeviceState;\n\n  onStatusChanged: (device: EspressifDevice) => void;\n  onNetworkStatusChanged: (\n    status: ESPNetworkStatus,\n    device: EspressifDevice\n  ) => void;\n\n  connect(): Promise<void>;\n  startSession(): Promise<void>;\n  setCredentials(ssid: string, passphrase: string): Promise<void>;\n  scanWifi(): Promise<EspressifWifi[]>;\n  networkTest(): Promise<void>;\n  disconnect(): Promise<void>;\n  getDeviceInfo(): Promise<EspressifDeviceInfo>;\n};\n\ntype EspressifType = {\n  bluetoothStatus: ESPBluetoothState;\n\n  /**\n   *\n   * @param {EspressifConfig} config - Configuration object for Espressif, MUST BE SET before any uses of RNEspressif\n   */\n  setConfig(config: EspressifConfig): void;\n  /**\n   * Start a bluetooth scan for searching every devices whose are close enough\n   */\n  scanDevices(): void;\n  /**\n   *\n   * @param {BluetoothStatusCallback} callback\n   */\n  addBluetoothStatusListener(\n    callback: BluetoothStatusCallback\n  ): EmitterSubscription;\n\n  /**\n   *\n   * @param {DevicesListCallback} callback\n   */\n  addDevicesListListener(callback: DevicesListCallback): EmitterSubscription;\n\n  OnStateChanged: (\n    state: ESPBluetoothState,\n    devices: EspressifDevice[]\n  ) => void;\n\n  startSession(deviceUuid: string): Promise<void>;\n  connectTo(deviceUuid: string): Promise<void>;\n  setCredentials(\n    ssid: string,\n    passphrase: string,\n    deviceUuid: string\n  ): Promise<void>;\n  scanWifi(deviceUuid: string): Promise<string>;\n  networkTestStatus(deviceUuid: string): Promise<void>;\n  disconnect(deviceUuid: string): Promise<void>;\n  getDeviceInfo(): Promise<string>;\n};\n\ninterface DevicesListCallback {\n  (state: ESPEventState, devices: EspressifDevice[]): void;\n}\n\ninterface BluetoothStatusCallback {\n  (status: ESPBluetoothState): void;\n}\n\nexport enum ESPTransportType {\n  Bluetooth = 'bluetooth',\n  Wifi = 'wifi',\n}\n\nexport enum ESPSecurityType {\n  Sec0 = 'sec0',\n  Sec1 = 'sec1',\n}\n\nexport enum ESPDeviceState {\n  Configured = 'CONFIGURED',\n  SessionEstablished = 'SESSION_ESTABLISHED',\n  NetworkTest = 'NETWORK_TEST',\n  Disconnected = 'DISCONNECTED',\n  NotConfigured = 'NOT_CONFIGURED',\n}\n\nexport enum ESPNetworkStatus {\n  NotStarted = 'NOT_STARTED',\n  InProgress = 'IN_PROGRESS',\n  Ok = 'OK',\n  Nok = 'NOK',\n}\n\nexport enum ESPEventState {\n  DeviceNotFound = 'DEVICES_NOT_FOUND',\n  Unknown = 'UNKNOWN',\n  DevicesFounds = 'DEVICES_FOUND',\n  DeviceUpdated = 'DEVICE_UPDATED',\n}\n\nexport enum ESPBluetoothState {\n  Unknown = 'UNKNOWN',\n  Resetting = 'RESETTING',\n  Unsupported = 'UNSUPPORTED',\n  Unauthorized = 'UNAUTHORIZED',\n  PoweredOff = 'POWERED_OFF',\n  PoweredOn = 'POWERED_ON',\n}\n\nconst setCallback = (device: EspressifDevice): EspressifDevice => {\n  device.startSession = async () => {\n    return await Espressif.startSession(device.uuid);\n  };\n\n  device.connect = async () => {\n    return await Espressif.connectTo(device.uuid);\n  };\n\n  device.setCredentials = async (ssid, passphrase) => {\n    return await Espressif.setCredentials(ssid, passphrase, device.uuid);\n  };\n\n  device.scanWifi = async () => {\n    const wifisJSON = await Espressif.scanWifi(device.uuid);\n    return JSON.parse(wifisJSON);\n  };\n\n  device.networkTest = async () => {\n    return await Espressif.networkTestStatus(device.uuid);\n  };\n\n  device.disconnect = async () => {\n    return await Espressif.disconnect(device.uuid);\n  };\n\n  device.getDeviceInfo = async () => {\n    const infoJson = await Espressif.getDeviceInfo();\n    return JSON.parse(infoJson);\n  };\n\n  return device;\n};\n\nconst Wrapper = (): EspressifType => {\n  let peripherals: EspressifDevice[] = [];\n\n  const RNEspressifEvent = new NativeEventEmitter(Espressif);\n\n  // RNEspressifEvent.listeners('bluetooth-status').forEach(listener => listener.remove());\n  // RNEspressifEvent.listeners('devices-state').forEach(listener => listener.remove());\n  // RNEspressifEvent.listeners('device-status').forEach(listener => listener.remove());\n  // RNEspressifEvent.listeners('network-state').forEach(listener => listener.remove());\n  // RNEspressifEvent.listeners('devices-list').forEach(listener => listener.remove());\n  RNEspressifEvent.removeAllListeners('bluetooth-status');\n  RNEspressifEvent.removeAllListeners('devices-state');\n  RNEspressifEvent.removeAllListeners('device-status');\n  RNEspressifEvent.removeAllListeners('network-state');\n  RNEspressifEvent.removeAllListeners('devices-list');\n\n  RNEspressifEvent.addListener('bluetooth-status', (status) => {\n    Espressif.bluetoothStatus = status;\n  });\n\n  Espressif.addBluetoothStatusListener = (\n    callback: (status: ESPBluetoothState) => void\n  ): EmitterSubscription => {\n    return RNEspressifEvent.addListener('bluetooth-status', callback);\n  };\n\n  Espressif.addDevicesListListener = (\n    callback: DevicesListCallback\n  ): EmitterSubscription => {\n    return RNEspressifEvent.addListener('devices-list', callback);\n  };\n\n  RNEspressifEvent.addListener('devices-state', (json) => {\n    const data = JSON.parse(json);\n    peripherals = data.peripherals;\n\n    peripherals.forEach((peripheral) => setCallback(peripheral));\n    RNEspressifEvent.emit('devices-list', data.state, peripherals);\n  });\n\n  RNEspressifEvent.addListener('device-status', (dataStr) => {\n    console.info({ dataStr });\n    const data = JSON.parse(dataStr);\n    const index = peripherals.findIndex(\n      (peripheral) => data.uuid === peripheral.uuid\n    );\n\n    console.info(data);\n    Object.assign(peripherals[index], data);\n    peripherals[index].onStatusChanged(peripherals[index]);\n  });\n\n  RNEspressifEvent.addListener('network-state', (dataStr) => {\n    const { uuid, status, components } = JSON.parse(dataStr);\n    const index = peripherals.findIndex(\n      (peripheral) => uuid === peripheral.uuid\n    );\n    console.info({ dataStr });\n    peripherals[index].onNetworkStatusChanged(status, components);\n  });\n\n  return Espressif;\n};\n\nexport default Wrapper;\n"]}