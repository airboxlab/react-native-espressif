// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: wifi_scan.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum WiFiScanMsgType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case typeCmdScanStart // = 0
  case typeRespScanStart // = 1
  case typeCmdScanStatus // = 2
  case typeRespScanStatus // = 3
  case typeCmdScanResult // = 4
  case typeRespScanResult // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .typeCmdScanStart
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .typeCmdScanStart
    case 1: self = .typeRespScanStart
    case 2: self = .typeCmdScanStatus
    case 3: self = .typeRespScanStatus
    case 4: self = .typeCmdScanResult
    case 5: self = .typeRespScanResult
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .typeCmdScanStart: return 0
    case .typeRespScanStart: return 1
    case .typeCmdScanStatus: return 2
    case .typeRespScanStatus: return 3
    case .typeCmdScanResult: return 4
    case .typeRespScanResult: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension WiFiScanMsgType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [WiFiScanMsgType] = [
    .typeCmdScanStart,
    .typeRespScanStart,
    .typeCmdScanStatus,
    .typeRespScanStatus,
    .typeCmdScanResult,
    .typeRespScanResult,
  ]
}

#endif  // swift(>=4.2)

struct CmdScanStart {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var blocking: Bool = false

  var passive: Bool = false

  var groupChannels: UInt32 = 0

  var periodMs: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct RespScanStart {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CmdScanStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct RespScanStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var scanFinished: Bool = false

  var resultCount: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CmdScanResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var startIndex: UInt32 = 0

  var count: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct WiFiScanResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ssid: Data = SwiftProtobuf.Internal.emptyData

  var channel: UInt32 = 0

  var rssi: Int32 = 0

  var bssid: Data = SwiftProtobuf.Internal.emptyData

  var auth: Espressif_WifiAuthMode = .open

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct RespScanResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var entries: [WiFiScanResult] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct WiFiScanPayload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var msg: WiFiScanMsgType {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  var status: Espressif_Status {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  var payload: OneOf_Payload? {
    get {return _storage._payload}
    set {_uniqueStorage()._payload = newValue}
  }

  var cmdScanStart: CmdScanStart {
    get {
      if case .cmdScanStart(let v)? = _storage._payload {return v}
      return CmdScanStart()
    }
    set {_uniqueStorage()._payload = .cmdScanStart(newValue)}
  }

  var respScanStart: RespScanStart {
    get {
      if case .respScanStart(let v)? = _storage._payload {return v}
      return RespScanStart()
    }
    set {_uniqueStorage()._payload = .respScanStart(newValue)}
  }

  var cmdScanStatus: CmdScanStatus {
    get {
      if case .cmdScanStatus(let v)? = _storage._payload {return v}
      return CmdScanStatus()
    }
    set {_uniqueStorage()._payload = .cmdScanStatus(newValue)}
  }

  var respScanStatus: RespScanStatus {
    get {
      if case .respScanStatus(let v)? = _storage._payload {return v}
      return RespScanStatus()
    }
    set {_uniqueStorage()._payload = .respScanStatus(newValue)}
  }

  var cmdScanResult: CmdScanResult {
    get {
      if case .cmdScanResult(let v)? = _storage._payload {return v}
      return CmdScanResult()
    }
    set {_uniqueStorage()._payload = .cmdScanResult(newValue)}
  }

  var respScanResult: RespScanResult {
    get {
      if case .respScanResult(let v)? = _storage._payload {return v}
      return RespScanResult()
    }
    set {_uniqueStorage()._payload = .respScanResult(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Payload: Equatable {
    case cmdScanStart(CmdScanStart)
    case respScanStart(RespScanStart)
    case cmdScanStatus(CmdScanStatus)
    case respScanStatus(RespScanStatus)
    case cmdScanResult(CmdScanResult)
    case respScanResult(RespScanResult)

  #if !swift(>=4.1)
    static func ==(lhs: WiFiScanPayload.OneOf_Payload, rhs: WiFiScanPayload.OneOf_Payload) -> Bool {
      switch (lhs, rhs) {
      case (.cmdScanStart(let l), .cmdScanStart(let r)): return l == r
      case (.respScanStart(let l), .respScanStart(let r)): return l == r
      case (.cmdScanStatus(let l), .cmdScanStatus(let r)): return l == r
      case (.respScanStatus(let l), .respScanStatus(let r)): return l == r
      case (.cmdScanResult(let l), .cmdScanResult(let r)): return l == r
      case (.respScanResult(let l), .respScanResult(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension WiFiScanMsgType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TypeCmdScanStart"),
    1: .same(proto: "TypeRespScanStart"),
    2: .same(proto: "TypeCmdScanStatus"),
    3: .same(proto: "TypeRespScanStatus"),
    4: .same(proto: "TypeCmdScanResult"),
    5: .same(proto: "TypeRespScanResult"),
  ]
}

extension CmdScanStart: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CmdScanStart"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "blocking"),
    2: .same(proto: "passive"),
    3: .standard(proto: "group_channels"),
    4: .standard(proto: "period_ms"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.blocking)
      case 2: try decoder.decodeSingularBoolField(value: &self.passive)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.groupChannels)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.periodMs)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.blocking != false {
      try visitor.visitSingularBoolField(value: self.blocking, fieldNumber: 1)
    }
    if self.passive != false {
      try visitor.visitSingularBoolField(value: self.passive, fieldNumber: 2)
    }
    if self.groupChannels != 0 {
      try visitor.visitSingularUInt32Field(value: self.groupChannels, fieldNumber: 3)
    }
    if self.periodMs != 0 {
      try visitor.visitSingularUInt32Field(value: self.periodMs, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CmdScanStart, rhs: CmdScanStart) -> Bool {
    if lhs.blocking != rhs.blocking {return false}
    if lhs.passive != rhs.passive {return false}
    if lhs.groupChannels != rhs.groupChannels {return false}
    if lhs.periodMs != rhs.periodMs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RespScanStart: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RespScanStart"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RespScanStart, rhs: RespScanStart) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CmdScanStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CmdScanStatus"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CmdScanStatus, rhs: CmdScanStatus) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RespScanStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RespScanStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "scan_finished"),
    2: .standard(proto: "result_count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.scanFinished)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.resultCount)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.scanFinished != false {
      try visitor.visitSingularBoolField(value: self.scanFinished, fieldNumber: 1)
    }
    if self.resultCount != 0 {
      try visitor.visitSingularUInt32Field(value: self.resultCount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RespScanStatus, rhs: RespScanStatus) -> Bool {
    if lhs.scanFinished != rhs.scanFinished {return false}
    if lhs.resultCount != rhs.resultCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CmdScanResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CmdScanResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_index"),
    2: .same(proto: "count"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.startIndex)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.count)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.startIndex != 0 {
      try visitor.visitSingularUInt32Field(value: self.startIndex, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularUInt32Field(value: self.count, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CmdScanResult, rhs: CmdScanResult) -> Bool {
    if lhs.startIndex != rhs.startIndex {return false}
    if lhs.count != rhs.count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension WiFiScanResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "WiFiScanResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ssid"),
    2: .same(proto: "channel"),
    3: .same(proto: "rssi"),
    4: .same(proto: "bssid"),
    5: .same(proto: "auth"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.ssid)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.channel)
      case 3: try decoder.decodeSingularInt32Field(value: &self.rssi)
      case 4: try decoder.decodeSingularBytesField(value: &self.bssid)
      case 5: try decoder.decodeSingularEnumField(value: &self.auth)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ssid.isEmpty {
      try visitor.visitSingularBytesField(value: self.ssid, fieldNumber: 1)
    }
    if self.channel != 0 {
      try visitor.visitSingularUInt32Field(value: self.channel, fieldNumber: 2)
    }
    if self.rssi != 0 {
      try visitor.visitSingularInt32Field(value: self.rssi, fieldNumber: 3)
    }
    if !self.bssid.isEmpty {
      try visitor.visitSingularBytesField(value: self.bssid, fieldNumber: 4)
    }
    if self.auth != .open {
      try visitor.visitSingularEnumField(value: self.auth, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: WiFiScanResult, rhs: WiFiScanResult) -> Bool {
    if lhs.ssid != rhs.ssid {return false}
    if lhs.channel != rhs.channel {return false}
    if lhs.rssi != rhs.rssi {return false}
    if lhs.bssid != rhs.bssid {return false}
    if lhs.auth != rhs.auth {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RespScanResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RespScanResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entries"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.entries)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RespScanResult, rhs: RespScanResult) -> Bool {
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension WiFiScanPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "WiFiScanPayload"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "msg"),
    2: .same(proto: "status"),
    10: .standard(proto: "cmd_scan_start"),
    11: .standard(proto: "resp_scan_start"),
    12: .standard(proto: "cmd_scan_status"),
    13: .standard(proto: "resp_scan_status"),
    14: .standard(proto: "cmd_scan_result"),
    15: .standard(proto: "resp_scan_result"),
  ]

  fileprivate class _StorageClass {
    var _msg: WiFiScanMsgType = .typeCmdScanStart
    var _status: Espressif_Status = .success
    var _payload: WiFiScanPayload.OneOf_Payload?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _msg = source._msg
      _status = source._status
      _payload = source._payload
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._msg)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._status)
        case 10:
          var v: CmdScanStart?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .cmdScanStart(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .cmdScanStart(v)}
        case 11:
          var v: RespScanStart?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .respScanStart(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .respScanStart(v)}
        case 12:
          var v: CmdScanStatus?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .cmdScanStatus(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .cmdScanStatus(v)}
        case 13:
          var v: RespScanStatus?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .respScanStatus(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .respScanStatus(v)}
        case 14:
          var v: CmdScanResult?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .cmdScanResult(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .cmdScanResult(v)}
        case 15:
          var v: RespScanResult?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .respScanResult(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .respScanResult(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._msg != .typeCmdScanStart {
        try visitor.visitSingularEnumField(value: _storage._msg, fieldNumber: 1)
      }
      if _storage._status != .success {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 2)
      }
      switch _storage._payload {
      case .cmdScanStart(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .respScanStart(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case .cmdScanStatus(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      case .respScanStatus(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      case .cmdScanResult(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      case .respScanResult(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: WiFiScanPayload, rhs: WiFiScanPayload) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._payload != rhs_storage._payload {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
