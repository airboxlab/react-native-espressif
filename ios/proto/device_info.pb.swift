// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: device_info.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum NetworkTestStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case testNotStarted // = 0
  case testInProgress // = 1
  case testOk // = 2
  case testNok // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .testNotStarted
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .testNotStarted
    case 1: self = .testInProgress
    case 2: self = .testOk
    case 3: self = .testNok
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .testNotStarted: return 0
    case .testInProgress: return 1
    case .testOk: return 2
    case .testNok: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension NetworkTestStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [NetworkTestStatus] = [
    .testNotStarted,
    .testInProgress,
    .testOk,
    .testNok,
  ]
}

#endif  // swift(>=4.2)

struct DeviceInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var protocolVersion: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct DeviceInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uuid: String = String()

  var macWiFi: String = String()

  var macEthernet: String = String()

  var fwVersion: String = String()

  var deviceCompatibility: String = String()

  var environment: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct NetworkTestStatusRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var protocolVersion: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct NetworkTestStatusResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var statusTestIp: NetworkTestStatus = .testNotStarted

  var statusTestInternet: NetworkTestStatus = .testNotStarted

  var statusTestCloud: NetworkTestStatus = .testNotStarted

  var message: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension NetworkTestStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TEST_NOT_STARTED"),
    1: .same(proto: "TEST_IN_PROGRESS"),
    2: .same(proto: "TEST_OK"),
    3: .same(proto: "TEST_NOK"),
  ]
}

extension DeviceInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "DeviceInfoRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "protocol_version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.protocolVersion)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.protocolVersion != 0 {
      try visitor.visitSingularInt32Field(value: self.protocolVersion, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DeviceInfoRequest, rhs: DeviceInfoRequest) -> Bool {
    if lhs.protocolVersion != rhs.protocolVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DeviceInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "DeviceInfoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "UUID"),
    2: .standard(proto: "MAC_WiFi"),
    3: .standard(proto: "MAC_Ethernet"),
    4: .standard(proto: "FW_Version"),
    5: .standard(proto: "Device_compatibility"),
    6: .same(proto: "environment"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.uuid)
      case 2: try decoder.decodeSingularStringField(value: &self.macWiFi)
      case 3: try decoder.decodeSingularStringField(value: &self.macEthernet)
      case 4: try decoder.decodeSingularStringField(value: &self.fwVersion)
      case 5: try decoder.decodeSingularStringField(value: &self.deviceCompatibility)
      case 6: try decoder.decodeSingularInt32Field(value: &self.environment)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 1)
    }
    if !self.macWiFi.isEmpty {
      try visitor.visitSingularStringField(value: self.macWiFi, fieldNumber: 2)
    }
    if !self.macEthernet.isEmpty {
      try visitor.visitSingularStringField(value: self.macEthernet, fieldNumber: 3)
    }
    if !self.fwVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.fwVersion, fieldNumber: 4)
    }
    if !self.deviceCompatibility.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceCompatibility, fieldNumber: 5)
    }
    if self.environment != 0 {
      try visitor.visitSingularInt32Field(value: self.environment, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DeviceInfoResponse, rhs: DeviceInfoResponse) -> Bool {
    if lhs.uuid != rhs.uuid {return false}
    if lhs.macWiFi != rhs.macWiFi {return false}
    if lhs.macEthernet != rhs.macEthernet {return false}
    if lhs.fwVersion != rhs.fwVersion {return false}
    if lhs.deviceCompatibility != rhs.deviceCompatibility {return false}
    if lhs.environment != rhs.environment {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension NetworkTestStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "NetworkTestStatusRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "protocol_version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.protocolVersion)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.protocolVersion != 0 {
      try visitor.visitSingularInt32Field(value: self.protocolVersion, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: NetworkTestStatusRequest, rhs: NetworkTestStatusRequest) -> Bool {
    if lhs.protocolVersion != rhs.protocolVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension NetworkTestStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "NetworkTestStatusResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "status_test_ip"),
    3: .standard(proto: "status_test_internet"),
    4: .standard(proto: "status_test_cloud"),
    5: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularEnumField(value: &self.statusTestIp)
      case 3: try decoder.decodeSingularEnumField(value: &self.statusTestInternet)
      case 4: try decoder.decodeSingularEnumField(value: &self.statusTestCloud)
      case 5: try decoder.decodeSingularStringField(value: &self.message)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.statusTestIp != .testNotStarted {
      try visitor.visitSingularEnumField(value: self.statusTestIp, fieldNumber: 2)
    }
    if self.statusTestInternet != .testNotStarted {
      try visitor.visitSingularEnumField(value: self.statusTestInternet, fieldNumber: 3)
    }
    if self.statusTestCloud != .testNotStarted {
      try visitor.visitSingularEnumField(value: self.statusTestCloud, fieldNumber: 4)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: NetworkTestStatusResponse, rhs: NetworkTestStatusResponse) -> Bool {
    if lhs.statusTestIp != rhs.statusTestIp {return false}
    if lhs.statusTestInternet != rhs.statusTestInternet {return false}
    if lhs.statusTestCloud != rhs.statusTestCloud {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
